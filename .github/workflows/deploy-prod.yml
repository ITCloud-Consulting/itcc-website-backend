name: Deploy PHP App to Production

on:
  push:
    branches:
      - prod
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Configuration SSH
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      # Test de la connexion SSH
      - name: Test SSH connection
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "echo 'SSH connection successful'"

      # Préparation du répertoire sur le serveur
      - name: Prepare deployment directory
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "
            mkdir -p /var/www/prod/itcc-website-backend
            sudo chown -R ${{ secrets.VPS_USER }}:${{ secrets.VPS_USER }} /var/www/prod/itcc-website-backend
          "

      # Synchronisation des fichiers
      - name: Sync files to server
        run: |
          rsync -avz --delete -e "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='.env' \
            --exclude='node_modules' \
            --exclude='vendor' \
            ./ ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/var/www/prod/itcc-website-backend/

      # Déploiement avec Docker
      - name: Deploy with Docker
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "
            cd /var/www/prod/itcc-website-backend

            # Créer le fichier .env si il n'existe pas
            if [ ! -f .env ]; then
              cat > .env << EOL
                APP_NAME=Laravel
                APP_ENV=production
                APP_KEY=${{ secrets.ITCC_API_APP_KEY }}
                APP_DEBUG=false
                APP_URL=${{ secrets.ITCC_API_APP_URL }}

                APP_LOCALE=en
                APP_FALLBACK_LOCALE=en
                APP_FAKER_LOCALE=en_US

                APP_MAINTENANCE_DRIVER=file

                PHP_CLI_SERVER_WORKERS=4
                BCRYPT_ROUNDS=12

                LOG_CHANNEL=stack
                LOG_STACK=single
                LOG_DEPRECATIONS_CHANNEL=null
                LOG_LEVEL=debug

                DB_CONNECTION=mysql
                DB_HOST=${{ secrets.ITCC_API_DB_HOST }}
                DB_PORT=${{ secrets.ITCC_API_DB_PORT }}
                DB_DATABASE=${{ secrets.ITCC_API_DB_DATABASE }}
                DB_USERNAME=${{ secrets.ITCC_API_DB_USERNAME }}
                DB_PASSWORD=${{ secrets.ITCC_API_DB_PASSWORD }}

                SESSION_DRIVER=database
                SESSION_LIFETIME=120
                SESSION_ENCRYPT=false
                SESSION_PATH=/
                SESSION_DOMAIN=null

                BROADCAST_CONNECTION=log
                FILESYSTEM_DISK=local
                QUEUE_CONNECTION=database
                CACHE_STORE=database

                MEMCACHED_HOST=127.0.0.1

                REDIS_CLIENT=phpredis
                REDIS_HOST=${{ secrets.ITCC_API_REDIS_HOST }}
                REDIS_PASSWORD=${{ secrets.ITCC_API_REDIS_PASSWORD }}
                REDIS_PORT=${{ secrets.ITCC_API_REDIS_PORT }}

                MAIL_MAILER=smtp
                MAIL_HOST=${{ secrets.ITCC_API_MAIL_HOST }}
                MAIL_PORT=${{ secrets.ITCC_API_MAIL_PORT }}
                MAIL_USERNAME=${{ secrets.ITCC_API_MAIL_USERNAME }}
                MAIL_PASSWORD=${{ secrets.ITCC_API_MAIL_PASSWORD }}
                MAIL_ENCRYPTION=${{ secrets.ITCC_API_MAIL_ENCRYPTION }}
                MAIL_FROM_ADDRESS=${{ secrets.ITCC_API_MAIL_FROM_ADDRESS }}
                MAIL_FROM_NAME="${{ secrets.ITCC_API_MAIL_FROM_NAME }}"

                ADMIN_EMAIL=${{ secrets.ITCC_API_ADMIN_EMAIL }}

                AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
                AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
                AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }}
                AWS_BUCKET=${{ secrets.AWS_BUCKET }}
                AWS_USE_PATH_STYLE_ENDPOINT=${{ secrets.AWS_USE_PATH_STYLE_ENDPOINT }}

                VITE_APP_NAME=\"\${APP_NAME}\"
                EOL
              fi
            # Docker build et migrations comme avant
            docker-compose down || true
            docker system prune -f || true
            docker-compose up -d --build
            sleep 30

            docker-compose exec -T app php artisan key:generate --force || true
            docker-compose exec -T app php artisan config:cache
            docker-compose exec -T app php artisan route:cache
            docker-compose exec -T app php artisan view:cache
            docker-compose exec -T app php artisan migrate --force

            docker-compose exec -T app composer install --no-dev --optimize-autoloader
            docker-compose exec -T app composer dump-autoload --optimize

            docker-compose exec -T app chown -R www:www /var/www/storage
            docker-compose exec -T app chown -R www:www /var/www/bootstrap/cache
            docker-compose exec -T app chmod -R 775 /var/www/storage
            docker-compose exec -T app chmod -R 775 /var/www/bootstrap/cache

            echo 'Deployment completed successfully!'
          "
